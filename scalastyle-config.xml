<scalastyle commentFilter="enabled">
    <name>Scalastyle standard configuration</name>

    <check level="warning" class="org.scalastyle.file.FileTabChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.file.FileLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxFileLength"><![CDATA[800]]></parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLineLength"><![CDATA[150]]></parameter>
            <parameter name="tabSize"><![CDATA[2]]></parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">
        <parameters>
            <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
        <parameters>
            <parameter name="maxParameters"><![CDATA[8]]></parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="true">
        <parameters>
            <parameter name="ignore"><![CDATA[-1,0,1,2,3]]></parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.ReturnChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.NullChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">
        <parameters>
            <parameter name="maxTypes"><![CDATA[30]]></parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">
        <parameters>
            <parameter name="maximum"><![CDATA[10]]></parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true">
        <parameters>
            <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
            <parameter name="doubleLineAllowed"><![CDATA[false]]></parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true">
        <parameters>
            <parameter name="maxMethods"><![CDATA[30]]></parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"/>

    <check customId="nonascii" level="warning" class="org.scalastyle.scalariform.NonASCIICharacterChecker"
           enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="false">
        <parameters>
            <parameter name="tokens">ARROW, ELSE, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY,
                LARROW, RARROW
            </parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.NotImplementedErrorUsage" enabled="true"/>

    <check customId="println" level="warning" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex">^println$</parameter>
        </parameters>
        <customMessage><![CDATA[Are you sure you want to println? If yes, wrap the code block with
     // scalastyle:off println
     println(...)
     // scalastyle:on println]]></customMessage>
    </check>

    <check customId="javaconversions" level="warning" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex">JavaConversions</parameter>
        </parameters>
        <customMessage>Instead of importing implicits in scala.collection.JavaConversions._, import
            scala.collection.JavaConverters._ and use .asScala / .asJava methods
        </customMessage>
    </check>

    <check customId="commonslang2" level="warning" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex">org\.apache\.commons\.lang\.</parameter>
        </parameters>
        <customMessage>Use Commons Lang 3 classes (package org.apache.commons.lang3.*) instead
            of Commons Lang 2 (package org.apache.commons.lang.*)
        </customMessage>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">COMMA</parameter>
        </parameters>
    </check>

    <check customId="SingleSpaceBetweenRParenAndLCurlyBrace" level="warning" class="org.scalastyle.file.RegexChecker"
           enabled="true">
        <parameters>
            <parameter name="regex">\)\{</parameter>
        </parameters>
        <customMessage><![CDATA[
     Single Space between ')' and `{`.
   ]]></customMessage>
    </check>

    <check customId="OmitBracesInCase" level="warning" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex">case[^\n>]*=>\s*\{</parameter>
        </parameters>
        <customMessage>Omit braces in case clauses.</customMessage>
    </check>

    <check customId="OverrideJavaCase" level="warning" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex">^Override$</parameter>
        </parameters>
        <customMessage>override modifier should be used instead of @java.lang.Override.</customMessage>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.EmptyClassChecker" enabled="true"/>

    <check level="warning" class="org.scalastyle.scalariform.ClassTypeParameterChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[A-Z_]$]]></parameter>
        </parameters>
    </check>

    <check level="warning" class="org.scalastyle.scalariform.LowercasePatternMatchChecker" enabled="true"/>

    <!-- ==================================================================================== -->
    <!-- Rules we don't enforce (you are free to enable them if you want to check your code ) -->
    <!-- ==================================================================================== -->

    <check level="info" class="org.scalastyle.scalariform.ImportGroupingChecker" enabled="false"/>

    <check level="info" class="org.scalastyle.scalariform.UnderscoreImportChecker" enabled="false"/>

    <check level="info" class="org.scalastyle.scalariform.ImportOrderChecker" enabled="false">
        <parameters>
            <parameter name="group.java">javax?\..*</parameter>
            <parameter name="group.scala">scala\..*</parameter>
        </parameters>
    </check>

    <check level="info" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="false">
        <parameters>
            <parameter name="maxLength"><![CDATA[50]]></parameter>
        </parameters>
    </check>

</scalastyle>
